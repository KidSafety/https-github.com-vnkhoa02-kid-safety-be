// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AccountType {
  FAMILY
  SCHOOL
  ORGANIZATION
  COMPANY
  OTHER
}

enum UserRole {
  USER
  MANAGER
  ADMIN
}

enum UserPosition {
  TEACHER
  STUDENT
  PARENT
  SCHOOL_MANAGER
  SITE_MANAGER
  ADMIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
  PENDING
  BANNED
  DELETED
}

model Account {
  id          String      @id @default(cuid())
  name        String
  type        AccountType
  description String?
  status      UserStatus  @default(ACTIVE)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  users       User[]
}

model User {
  id               String             @id @default(cuid())
  email            String             @unique
  first_name       String?
  last_name        String?
  managerId        String?
  managerPassword  String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  role             UserRole           @default(USER)
  status           UserStatus         @default(ACTIVE)
  belongTo         User?              @relation("ManagerUser", fields: [managerId], references: [id])
  User             User[]             @relation("ManagerUser")
  ChromeWebHistory ChromeWebHistory[]
  Account          Account?           @relation(fields: [accountId], references: [id])
  accountId        String?
}

model ChromeWebHistory {
  id            String   @id @default(cuid())
  itemId        String   @unique
  url           String
  title         String?
  score         Float
  category      String?
  isHarmful     Boolean  @default(false)
  lastVisitTime DateTime
  visitCount    Int      @default(1)
  typedCount    Int
  duration      Int
  userId        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  User User @relation(fields: [userId], references: [id])
}
